import { hydrateElement } from '../util/util';
export class NavController {
    constructor(element) {
        this.element = element;
    }
    push(component, data, opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.push(component, data, opts);
        });
    }
    pop(opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.pop(opts);
        });
    }
    setRoot(component, data, opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.setRoot(component, data, opts);
        });
    }
    insert(insertIndex, page, params, opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.insert(insertIndex, page, params, opts);
        });
    }
    insertPages(insertIndex, insertPages, opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.insertPages(insertIndex, insertPages, opts);
        });
    }
    popToRoot(opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.popToRoot(opts);
        });
    }
    popTo(indexOrViewCtrl, opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.popTo(indexOrViewCtrl, opts);
        });
    }
    removeIndex(startIndex, removeCount, opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.removeIndex(startIndex, removeCount, opts);
        });
    }
    removeView(viewController, opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.removeView(viewController, opts);
        });
    }
    setPages(componentDataPairs, opts) {
        return hydrateElement(this.element).then((navElement) => {
            return navElement.setPages(componentDataPairs, opts);
        });
    }
    getActive() {
        if (this.element.getActive) {
            return this.element.getActive();
        }
        return null;
    }
    getPrevious(view) {
        if (this.element.getPrevious) {
            return this.element.getPrevious(view);
        }
        return null;
    }
    canGoBack(nav) {
        if (this.element.canGoBack) {
            return this.element.canGoBack(nav);
        }
        return false;
    }
    canSwipeBack() {
        if (this.element.canSwipeBack) {
            return this.element.canSwipeBack();
        }
        return false;
    }
    getFirstView() {
        if (this.element.getFirstView) {
            return this.element.getFirstView();
        }
        return null;
    }
}
//# sourceMappingURL=nav-controller.js.map