var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { EventEmitter } from '@stencil/core';
import { Animation, AnimationBuilder, AnimationController, Config, FrameworkDelegate, OverlayDismissEvent, OverlayDismissEventDetail } from '../../index';
import { DomFrameworkDelegate } from '../../utils/dom-framework-delegate';
import { domControllerAsync, playAnimationAsync } from '../../utils/helpers';
import { createThemedClasses } from '../../utils/theme';
import iosEnterAnimation from './animations/ios.enter';
import iosLeaveAnimation from './animations/ios.leave';
import mdEnterAnimation from './animations/md.enter';
import mdLeaveAnimation from './animations/md.leave';
export class Modal {
    constructor() {
        this.data = {};
        this.enableBackdropDismiss = true;
        this.showBackdrop = true;
    }
    present() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.animation) {
                this.animation.destroy();
                this.animation = null;
            }
            this.ionModalWillPresent.emit();
            this.el.style.zIndex = `${20000 + this.modalId}`;
            // get the user's animation fn if one was provided
            const animationBuilder = this.enterAnimation || this.config.get('modalEnter', this.mode === 'ios' ? iosEnterAnimation : mdEnterAnimation);
            const userComponentParent = this.el.querySelector(`.${USER_COMPONENT_MODAL_CONTAINER_CLASS}`);
            if (!this.delegate) {
                this.delegate = new DomFrameworkDelegate();
            }
            const cssClasses = ['ion-page'];
            if (this.cssClass && this.cssClass.length) {
                cssClasses.push(this.cssClass);
            }
            // add the modal by default to the data being passed
            this.data = this.data || {};
            this.data.modal = this.el;
            const mountingData = yield this.delegate.attachViewToDom(userComponentParent, this.component, this.data, cssClasses);
            this.usersComponentElement = mountingData.element;
            this.animation = yield this.animationCtrl.create(animationBuilder, this.el);
            if (!this.animate) {
                // if the duration is 0, it won't actually animate I don't think
                // TODO - validate this
                this.animation = this.animation.duration(0);
            }
            yield playAnimationAsync(this.animation);
            this.animation.destroy();
            this.ionModalDidPresent.emit();
        });
    }
    dismiss(data, role) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.animation) {
                this.animation.destroy();
                this.animation = null;
            }
            this.ionModalWillDismiss.emit({
                data,
                role
            });
            if (!this.delegate) {
                this.delegate = new DomFrameworkDelegate();
            }
            // get the user's animation fn if one was provided
            const animationBuilder = this.leaveAnimation || this.config.get('modalLeave', this.mode === 'ios' ? iosLeaveAnimation : mdLeaveAnimation);
            this.animation = yield this.animationCtrl.create(animationBuilder, this.el);
            yield playAnimationAsync(this.animation);
            this.animation.destroy();
            yield domControllerAsync(Context.dom.write, () => { });
            // TODO - Figure out how to make DOM controller work with callbacks that return a promise or are async
            const userComponentParent = this.el.querySelector(`.${USER_COMPONENT_MODAL_CONTAINER_CLASS}`);
            yield this.delegate.removeViewFromDom(userComponentParent, this.usersComponentElement);
            this.el.parentElement.removeChild(this.el);
            this.ionModalDidDismiss.emit({
                data,
                role
            });
        });
    }
    getUserComponentContainer() {
        return this.el.querySelector(`.${USER_COMPONENT_MODAL_CONTAINER_CLASS}`);
    }
    onDismiss(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        this.dismiss();
    }
    componentDidLoad() {
        this.ionModalDidLoad.emit();
    }
    componentDidUnload() {
        this.ionModalDidUnload.emit();
    }
    backdropClick() {
        if (this.enableBackdropDismiss) {
            // const opts: NavOptions = {
            //   minClickBlockDuration: 400
            // };
            this.dismiss();
        }
    }
    render() {
        const dialogClasses = createThemedClasses(this.mode, this.color, 'modal-wrapper');
        return [
            h("div", { onClick: this.backdropClick.bind(this), class: {
                    'modal-backdrop': true,
                    'hide-backdrop': !this.showBackdrop
                } }),
            h("div", { role: 'dialog', class: dialogClasses })
        ];
    }
}
export { iosEnterAnimation as iosModalEnterAnimation, iosLeaveAnimation as iosModalLeaveAnimation, mdEnterAnimation as mdModalEnterAnimation, mdLeaveAnimation as mdModalLeaveAnimation };
export const USER_COMPONENT_MODAL_CONTAINER_CLASS = 'modal-wrapper';
