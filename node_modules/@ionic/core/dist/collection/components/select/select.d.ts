import { EventEmitter } from '@stencil/core';
import { HTMLIonSelectOptionElementEvent } from '../select-option/select-option';
import { BlurEvent, FocusEvent, SelectInputChangeEvent } from '../../utils/input-interfaces';
import { ActionSheetController } from '../action-sheet-controller/action-sheet-controller';
import { AlertController } from '../alert-controller/alert-controller';
import { PopoverController } from '../popover-controller/popover-controller';
export declare class Select {
    private childOpts;
    private selectId;
    private labelId;
    private overlay;
    private el;
    isExpanded: boolean;
    keyFocus: boolean;
    text: string;
    actionSheetCtrl: ActionSheetController;
    alertCtrl: AlertController;
    popoverCtrl: PopoverController;
    /**
     * If true, the user cannot interact with the select. Defaults to `false`.
     */
    disabled: boolean;
    /**
     * The text to display on the cancel button. Default: `Cancel`.
     */
    cancelText: string;
    /**
     * The text to display on the ok button. Default: `OK`.
     */
    okText: string;
    /**
     * The text to display when the select is empty.
     */
    placeholder: string;
    /**
     * The name of the control, which is submitted with the form data.
     */
    name: string;
    /**
     * The text to display instead of the selected option's value.
     */
    selectedText: string;
    /**
     * If true, the select can accept multiple values.
     */
    multiple: boolean;
    /**
     * The interface the select should use: `action-sheet`, `popover` or `alert`. Default: `alert`.
     */
    interface: string;
    /**
     * Any additional options that the `alert`, `action-sheet` or `popover` interface
     * can take. See the [AlertController API docs](../../alert/AlertController/#create), the
     * [ActionSheetController API docs](../../action-sheet/ActionSheetController/#create) and the
     * [PopoverController API docs](../../popover/PopoverController/#create) for the
     * create options for each interface.
     */
    interfaceOptions: any;
    /**
     *
     */
    value: string | string[];
    valueChanged(): void;
    /**
     * Emitted when the value has changed.
     */
    ionChange: EventEmitter<SelectInputChangeEvent>;
    /**
     * Emitted when the selection is cancelled.
     */
    ionCancel: EventEmitter;
    /**
     * Emitted when the select has focus.
     */
    ionFocus: EventEmitter<FocusEvent>;
    /**
     * Emitted when the select loses focus.
     */
    ionBlur: EventEmitter<BlurEvent>;
    optLoad(ev: HTMLIonSelectOptionElementEvent): void;
    optUnload(ev: HTMLIonSelectOptionElementEvent): void;
    onSelect(ev: HTMLIonSelectOptionElementEvent): void;
    constructor();
    componentWillLoad(): void;
    componentDidLoad(): void;
    getLabel(): HTMLIonLabelElement;
    open(ev: UIEvent): Promise<HTMLIonActionSheetElement> | Promise<HTMLIonAlertElement> | Promise<HTMLIonPopoverElement>;
    openPopover(ev: UIEvent): Promise<HTMLIonPopoverElement>;
    openActionSheet(): Promise<HTMLIonActionSheetElement>;
    openAlert(): Promise<HTMLIonAlertElement>;
    /**
     * Close the select interface.
     */
    close(): Promise<any> | void;
    onKeyUp(): void;
    onFocus(): void;
    onBlur(): void;
    hostData(): {
        class: {
            'select-disabled': boolean;
            'select-key': boolean;
        };
    };
    render(): JSX.Element[];
}
