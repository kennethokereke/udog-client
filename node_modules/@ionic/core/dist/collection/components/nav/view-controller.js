import { FrameworkDelegate, Nav, PublicViewController } from '../../index';
import { STATE_ATTACHED, STATE_DESTROYED, STATE_INITIALIZED, STATE_NEW } from './nav-utils';
import { assert } from '../../utils/helpers';
export class ViewController {
    constructor(component, data) {
        this.component = component;
        initializeNewViewController(this, data);
    }
    /**
     * Dismiss the current viewController
     * @param {any} [data] Data that you want to return when the viewController is dismissed.
     * @param {any} [role ]
     * @param {NavOptions} navOptions Options for the dismiss navigation.
     * @returns {any} data Returns the data passed in, if any.
     */
    dismiss(data, role, navOptions = {}) {
        this.dismissProxy = {};
        return dismiss(this.nav, this.dismissProxy, data, role, navOptions);
    }
    willLeave(unload) {
        willLeaveImpl(unload, this);
    }
    didLeave() {
        didLeaveImpl(this);
    }
    willEnter() {
        callLifeCycleFunction(this.instance, 'ionViewWillEnter');
    }
    didEnter() {
        didEnterImpl(this);
    }
    willLoad() {
        willLoadImpl(this);
    }
    didLoad() {
        didLoadImpl(this);
    }
    willUnload() {
        willUnloadImpl(this);
    }
    destroy(delegate) {
        return destroy(this, delegate);
    }
    getTransitionName(_direction) {
        // TODO
        return '';
    }
}
export function callLifecycle(instance, methodName) {
    instance && instance[methodName] && instance[methodName]();
}
export function dismiss(navCtrl, dismissProxy, data, role, navOptions = {}) {
    if (!navCtrl) {
        assert(this._state === STATE_DESTROYED, 'ViewController does not have a valid _nav');
        return Promise.resolve(false);
    }
    if (this.overlay && !navOptions.minClickBlockDuration) {
        // This is a Modal being dismissed so we need
        // to add the minClickBlockDuration option
        // for UIWebView
        navOptions.minClickBlockDuration = 400;
    }
    dismissProxy.data = data;
    dismissProxy.role = role;
    const options = Object.assign({}, this._leavingOpts, navOptions);
    return navCtrl.removeView(this, options).then(() => data);
}
export function destroy(viewController, delegate) {
    assert(viewController.state !== STATE_DESTROYED, 'view state must be attached');
    return delegate ? delegate.removeViewFromDom(viewController.nav.element, viewController.element) : Promise.resolve().then(() => {
        if (viewController.component) {
            // TODO - consider removing classes and styles as thats what we do in ionic-angular
        }
        viewController.id = viewController.data = viewController.element = viewController.instance = viewController.nav = viewController.dismissProxy = null;
        viewController.state = STATE_DESTROYED;
    });
}
export function callLifeCycleFunction(instance, functionName) {
    instance && instance[functionName] && instance[functionName]();
}
export function willLeaveImpl(unload, viewController) {
    callLifeCycleFunction(viewController.instance, 'ionViewWillLeave');
    if (unload && viewController.onWillDismiss) {
        viewController.onWillDismiss(this.dismissProxy.data, this.dismissProxy.proxy);
        viewController.onWillDismiss = null;
    }
}
export function didLeaveImpl(viewController) {
    callLifeCycleFunction(viewController.instance, 'ionViewDidLeave');
    // TODO, maybe need to do something framework specific here... figure this out later
    // for example, disconnecting from change detection
}
export function willEnterImpl(viewController) {
    assert(viewController.state === STATE_ATTACHED, 'view state must be ATTACHED');
    // TODO, maybe need to do something framework specific here... figure this out later
    // for example, connecting to change detection
    callLifeCycleFunction(viewController.instance, 'ionViewWillEnter');
}
export function didEnterImpl(viewController) {
    assert(viewController.state === STATE_ATTACHED, 'view state must be ATTACHED');
    // TODO - navbar didEnter here
    callLifeCycleFunction(viewController.instance, 'ionViewDidEnter');
}
export function willLoadImpl(viewController) {
    assert(viewController.state === STATE_INITIALIZED, 'view state must be INITIALIZED');
    callLifeCycleFunction(viewController.instance, 'ionViewWillLoad');
}
export function willUnloadImpl(viewController) {
    callLifeCycleFunction(viewController.instance, 'ionViewWillUnLoad');
    viewController.onDidDismiss && viewController.onDidDismiss(viewController.dismissProxy.data, viewController.dismissProxy.role);
    viewController.onDidDismiss = viewController.dismissProxy = null;
}
export function didLoadImpl(viewController) {
    assert(viewController.state === STATE_ATTACHED, 'view state must be ATTACHED');
    callLifeCycleFunction(viewController.instance, 'ionViewDidLoad');
}
export function initializeNewViewController(viewController, data) {
    viewController.state = STATE_NEW;
    viewController.data = data || {};
}
