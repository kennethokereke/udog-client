import { EventEmitter } from '@stencil/core';
import { Animation, AnimationController, ComponentDataPair, Config, FrameworkDelegate, NavOptions, NavResult, NavState, PublicNav, PublicViewController, RouterEntries, Transition, TransitionInstruction } from '../../index';
import { ViewController } from './view-controller';
import { buildMdTransition } from './transitions/transition.md';
export declare class Nav implements PublicNav {
    element: HTMLElement;
    navInit: EventEmitter;
    ionNavChanged: EventEmitter;
    useRouter: boolean;
    navId: number;
    init: boolean;
    routes: RouterEntries;
    parent: Nav;
    views: ViewController[];
    transitioning?: boolean;
    destroyed?: boolean;
    transitionId?: number;
    isViewInitialized?: boolean;
    isPortal: boolean;
    swipeToGoBackTransition: any;
    childNavs?: Nav[];
    mode: string;
    root: any;
    delegate: FrameworkDelegate;
    config: Config;
    animationCtrl: AnimationController;
    constructor();
    componentWillLoad(): void;
    componentDidLoad(): void;
    getViews(): PublicViewController[];
    push(component: any, data?: any, opts?: NavOptions): Promise<any>;
    pop(opts?: NavOptions): Promise<any>;
    setRoot(component: any, data?: any, opts?: NavOptions): Promise<any>;
    insert(insertIndex: number, page: any, params?: any, opts?: NavOptions): Promise<any>;
    insertPages(insertIndex: number, insertPages: any[], opts?: NavOptions): Promise<any>;
    popToRoot(opts?: NavOptions): Promise<any>;
    popTo(indexOrViewCtrl: any, opts?: NavOptions): Promise<any>;
    removeIndex(startIndex: number, removeCount?: number, opts?: NavOptions): Promise<any>;
    removeView(viewController: PublicViewController, opts?: NavOptions): Promise<any>;
    setPages(componentDataPairs: ComponentDataPair[], opts?: NavOptions): Promise<any>;
    getActive(): PublicViewController;
    getPrevious(view?: PublicViewController): PublicViewController;
    canGoBack(): boolean;
    canSwipeBack(): boolean;
    getFirstView(): PublicViewController;
    resize(): void;
    navInitialized(event: CustomEvent): void;
    getState(): NavState;
    setRouteId(id: string, _?: any): Promise<void>;
    getRoutes(): RouterEntries;
    render(): JSX.Element;
}
export declare function getState(nav: Nav): NavState;
export declare function componentDidLoadImpl(nav: Nav): void;
export declare function pushImpl(nav: Nav, component: any, data: any, opts: NavOptions): Promise<any>;
export declare function popImpl(nav: Nav, opts: NavOptions): Promise<any>;
export declare function setRootImpl(nav: Nav, component: any, data: any, opts: NavOptions): Promise<any>;
export declare function insertImpl(nav: Nav, insertIndex: number, page: any, params: any, opts: NavOptions): Promise<any>;
export declare function insertPagesImpl(nav: Nav, insertIndex: number, pagesToInsert: any[], opts: NavOptions): Promise<any>;
export declare function popToRootImpl(nav: Nav, opts: NavOptions): Promise<any>;
export declare function popToImpl(nav: Nav, indexOrViewCtrl: any, opts: NavOptions): Promise<any>;
export declare function removeImpl(nav: Nav, startIndex: number, removeCount: number, opts: NavOptions): Promise<any>;
export declare function removeViewImpl(nav: Nav, viewController: PublicViewController, opts?: NavOptions): Promise<any>;
export declare function setPagesImpl(nav: Nav, componentDataPairs: ComponentDataPair[], opts?: NavOptions): Promise<any>;
export declare function canGoBackImpl(nav: Nav): boolean;
export declare function navInitializedImpl(potentialParent: Nav, event: CustomEvent): void;
export declare function hydrateAnimationController(animationController: AnimationController): Promise<Animation>;
export declare function push(nav: Nav, delegate: FrameworkDelegate, animation: Animation, component: any, data?: any, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function insert(nav: Nav, delegate: FrameworkDelegate, animation: Animation, insertIndex: number, page: any, params?: any, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function insertPages(nav: Nav, delegate: FrameworkDelegate, animation: Animation, insertIndex: number, insertPages: any[], opts?: NavOptions, done?: () => void): Promise<any>;
export declare function pop(nav: Nav, delegate: FrameworkDelegate, animation: Animation, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function popToRoot(nav: Nav, delegate: FrameworkDelegate, animation: Animation, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function popTo(nav: Nav, delegate: FrameworkDelegate, animation: Animation, indexOrViewCtrl: any, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function remove(nav: Nav, delegate: FrameworkDelegate, animation: Animation, startIndex: number, removeCount?: number, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function removeView(nav: Nav, delegate: FrameworkDelegate, animation: Animation, viewController: ViewController, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function setRoot(nav: Nav, delegate: FrameworkDelegate, animation: Animation, page: any, params?: any, opts?: NavOptions, done?: () => void): Promise<any>;
export declare function setPages(nav: Nav, delegate: FrameworkDelegate, animation: Animation, componentDataPars: ComponentDataPair[], opts?: NavOptions, done?: () => void): Promise<any>;
export declare function queueTransaction(ti: TransitionInstruction, done: () => void): Promise<boolean>;
export declare function nextTransaction(nav: Nav): Promise<any>;
export declare function successfullyTransitioned(result: NavResult, ti: TransitionInstruction): void;
export declare function transitionFailed(error: Error, ti: TransitionInstruction): void;
export declare function fireError(error: Error, ti: TransitionInstruction): void;
export declare function loadViewAndTransition(nav: Nav, enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): Promise<{
    hasCompleted: boolean;
    requiresTransition: boolean;
}>;
export declare function executeAsyncTransition(nav: Nav, transition: Transition, enteringView: ViewController, leavingView: ViewController, delegate: FrameworkDelegate, opts: NavOptions, configShouldAnimate: boolean): Promise<NavResult>;
export declare function transitionFinish(nav: Nav, transition: Transition, delegate: FrameworkDelegate, opts: NavOptions): Promise<NavResult>;
export declare function cleanUpView(nav: Nav, delegate: FrameworkDelegate, activeViewController: ViewController): Promise<any>;
export declare function fireViewWillLifecycles(enteringView: ViewController, leavingView: ViewController): void;
export declare function attachViewToDom(nav: Nav, enteringView: ViewController, delegate: FrameworkDelegate): Promise<void>;
export declare function initializeViewBeforeTransition(nav: Nav, ti: TransitionInstruction): Promise<ViewController[]>;
export declare function updateNavStacks(enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): Promise<any>;
export declare function destroyView(nav: Nav, delegate: FrameworkDelegate, viewController: ViewController): Promise<void>;
export declare function removeViewFromList(nav: Nav, viewController: ViewController): void;
export declare function insertViewIntoNav(nav: Nav, view: ViewController, index: number): void;
export declare function testIfViewsCanLeaveAndEnter(enteringView: ViewController, leavingView: ViewController, ti: TransitionInstruction): Promise<void>;
export declare function lifeCycleTest(viewController: ViewController, enterOrLeave: string): Promise<any>;
export declare function startTransaction(ti: TransitionInstruction): Promise<any>;
export declare function getEnteringView(ti: TransitionInstruction, nav: Nav, leavingView: ViewController): ViewController;
export declare function convertViewsToViewControllers(views: any[]): ViewController[];
export declare function convertComponentToViewController(nav: Nav, ti: TransitionInstruction): ViewController[];
export declare function addToQueue(ti: TransitionInstruction): void;
export declare function getQueue(id: number): TransitionInstruction[];
export declare function resetQueue(id: number): void;
export declare function getTopTransaction(id: number): TransitionInstruction;
export declare function getDefaultTransition(config: Config): typeof buildMdTransition;
